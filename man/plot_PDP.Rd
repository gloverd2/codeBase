% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_PDP.R
\name{plot_PDP}
\alias{plot_PDP}
\title{plot_PDP}
\usage{
plot_PDP(
  data,
  model,
  explain_col,
  weight = rep(1, nrow(data)),
  offset_base_margin = NULL,
  exposure_type = "pdf",
  n_bins = 10,
  use_plotly = TRUE
)
}
\arguments{
\item{data}{dataframe - Data to use for the predictions. Should have same columns as training data (can be training data)}

\item{model}{model object - Model to produce PDP from}

\item{explain_col}{string - Vector of length 1 for 1D plot or length 2 for 2D plot. This is the factor(s) to explain in the model. The columns must be in \code{data}}

\item{weight}{numeric - Vector of length \code{nrow(data)} contains weightings, if NULL even weighting is used}

\item{offset_base_margin}{numeric - Vector of length \code{nrow(data)} contains offset for model.
This multiples each prediction by \code{exp(offset_base_margin)} and is the same argument passed to a xgb.DMatrix object as \code{base_margin}}

\item{exposure_type}{-  character. either \code{'pdf'} or \code{'count'}. Method used to plot exposure}

\item{n_bins}{numeric - Vector of length 1 for 1D plot and 1 or 2 for 2D plots. This is the number of points to calculate the PDP for}

\item{use_plotly}{Optional: boolean - If TRUE plotly object is returned else ggplot2 object}
}
\value{
plotly/ggplot object of PDP plot
}
\description{
Plot a 1D or 2D Partial Dependence Plot (PDP)
}
\examples{

data <- data.frame(x1=runif(100, 0, 25), x2=runif(100, 0, 25)) \%>\%
  dplyr::mutate(target=x1^2 * 0.01 + x2 + rnorm(n(),sd=5))

#LM
model_lm <- glm(target ~ poly(x1, 2) + x2, data=data)

plot_PDP(data, model_lm, explain_col="x1", n_bins=5)
plot_PDP(data, model_lm, explain_col="x2", n_bins=5)
plot_PDP(data, model_lm, explain_col=c("x1","x2"), n_bins=5)

#GLM
model_glm <- glm(target ~ poly(x1, 2) + x2, data=data)

plot_PDP(data, model_glm, explain_col="x1", n_bins=5)
plot_PDP(data, model_glm, explain_col="x2", n_bins=5)
plot_PDP(data, model_glm, explain_col=c("x1","x2"), n_bins=5)

#GBM
model_gbm <- xgboost(data = as.matrix(data[,which(!(names(data)=="target"))]), label=data[["target"]], nrounds=20, verbose = 0)
plot_PDP(data[,which(!(names(data)=="target"))], model_gbm, explain_col="x1", n_bins=10)
plot_PDP(data[,which(!(names(data)=="target"))], model_gbm, explain_col="x2", n_bins=10)
plot_PDP(data[,which(!(names(data)=="target"))], model_gbm, explain_col=c("x1","x2"), n_bins=10)

}
\seealso{
plot_ALE
}
