% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_char_num_sort.R
\name{prep_char_num_sort}
\alias{prep_char_num_sort}
\title{prep_char_num_sort}
\usage{
prep_char_num_sort(
  array,
  NA_val = "_NA",
  char_decreasing = FALSE,
  num_decreasing = FALSE,
  unique_val = FALSE
)
}
\arguments{
\item{array}{Array[Character] - This is the array which we want to sort. (If you create c(1,2,"3") they all get assigned character.)}

\item{NA_val}{Character/Numeric/NA (Default = "NA") - This is the value which we want to put NAs as.
I recommend using "_NA" when you need to treat NAs as a character to get it positioned near the start rather than in the middle which "NA" would do.
If NA is not NA and cannot be converted to numeric, NA will get treated as character and therefore get affected by char_decreasing.}

\item{char_decreasing}{Boolean/NULL (Default = FALSE) - Set this to TRUE if you want character values sorted into descending order. Set to NULL if you do not want character values sorted.}

\item{num_decreasing}{Boolean/NULL (Default = FALSE) - Set this to TRUE if you want numeric values sorted into descending order. Set to NULL if you do not want numeric values sorted.}

\item{unique}{Boolean (Default = TRUE) - Set this to true if you want unique sorted outputs after handling NAs.}
}
\value{
Array[Character] - This will be the entries in array_to_sort sorted. Sections sorted are dependent on char_decreasing and num_decreasing.
This could be unique dependent on the parameter "unique".
Note that all of these will be character values.
}
\description{
This is a function which can be used to sort arrays of numeric and characters.
This allows you to get numbers into order as characters. e.g. (1,2,100) rather than alphabetical (1,100,2).
This can sometimes when creating other functions which require you to have character inputs, as these quite often will cause values to be out of place.
NOTE: This function uses regex to determine what counts as a string, if some columns have symbols, they may fail to be read.
}
\section{Inputs}{

}

\section{Functions dependant on this}{

expl_band_cond_shift
}

\section{Functions needed in this}{

check_all_identical
}

\examples{
prep_char_num_sort(c("100","C","M","T","-55555","-44444","-33333","0",NA))
# Output: c("_NA", "C", "M", "T", "-55555", "-44444", "-33333", "0" , "100")
prep_char_num_sort(c("100","C","M","T","-55555","-44444","-33333","0",NA),NA_val = "-1")
# Output: c("C", "M", "T", "-55555", "-44444", "-33333", "-1", "0" , "100")

}
